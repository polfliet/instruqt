slug: flex-integration-kubernetes-basic
id: miovt93nqiny
type: track
title: Flex Integration - Build Your First Kubernetes Configuration
teaser: An introduction to creating configurations for the Flex Integration on New
  Relic's Infrastructure Agent
description: |-
  # Overview
  This track is an introduction to the [Flex Integration](https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/flex-integration-tool-build-your-own-integration) on New Relic's [Infrastructure Agent for Kubernetes](https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure).

  ## Requirements
  Completion of this track will require you to have access to your New Relic [License Key](https://docs.newrelic.com/docs/accounts/install-new-relic/account-setup/license-key). This can be from your paid New Relic account or from your free [Developer Edition](https://developer.newrelic.com/build-tools/new-relic-one-applications/developer-edition-program) account.

  ## What is the Flex Integration?
  *From [How to Use New Relic Flex to Create Your Own Codeless Custom Integrations](https://blog.newrelic.com/product-news/how-to-use-new-relic-flex/)*

  "New Relic Flex is an application-agnostic, all-in-one tool that allows you to collect metric data from a wide variety of services. Flex’s approach is different from that of dedicated integrations: Instead of interfacing directly with services, Flex instructs the New Relic Infrastructure agent to listen to standard structured output, which Flex then processes and collects as metric data for Infrastructure.

  With this approach, you can instrument any application that exposes metric data in some way or another, whether it’s from JSON over HTTP or from standard output in a shell session, and combine that data with all your other critical telemetry data in New Relic One. The amount of services you can instrument is only limited by the data sources supported by Flex, which are growing and are open for contribution. If a service can talk, chances are that Flex can listen."

  ## Important Note
  **This track utilizes an ephemeral kubernetes environment. As a result, you should be prepared to finish the entire track in one sitting or risk losing your progress when the timer expires.**
icon: https://github.com/polfliet/instruqt/blob/master/assets/icons/flex-logo.png?raw=true
tags:
- ""
owner: newrelic
developers:
- zmutchler@newrelic.com
- bschmitt@newrelic.com
private: true
published: false
challenges:
- slug: best-practice-using-kubernetes-secrets
  id: dnqpealpj5d4
  type: challenge
  title: Best Practice - Using Kubernetes Secrets
  teaser: Use a Kubernetes secret to store the New Relic license key
  assignment: "Kubernetes secrets are a great way to store passwords, private keys,
    and other sensitive information. The secrets can then be shared with pods and
    containers without having to pass them as plain text in your YAML files. You can
    find more information about Kubernetes secrets on the [Kubernetes docs](https://kubernetes.io/docs/concepts/configuration/secret/).\n\nWe
    will create a Kubernetes secret that contains your New Relic License key. The
    License key will be used by the New Relic Observability agents to send data to
    the platform. \n\n# Get your New Relic license key\nFirst we need to retrieve
    your New Relic license key by logging in to your New Relic account, and clicking
    on Account Settings. \n\nIf you don't have an account yet you can create a free
    account on [New Relic.com](https://newrelic.com/signup).\n\n![alt text](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/nrlicense.gif?raw=true
    \"License key\")\n\n# Create the Kubernetes secret\nNext we are going to create
    the Kubernetes secret by copying the following command and **putting your license
    key between the quotes** before pressing enter.\n\n```\nkubectl create secret
    generic newrelic-secret --from-literal=new_relic_license_key='<LICENSE_KEY>'\n```\n\nYou
    can check if the secret was added succesfully by running \n```\nkubectl describe
    secret newrelic-secret\n```\n\nIf you made a mistake, you can delete the secret
    with \n```\nkubectl delete secret newrelic-secret\n```\n\nThe yaml files in the
    rest of this tutorial will refer to this *newrelic-secret* to retrieve the license
    key. \n"
  notes:
  - type: text
    contents: "Please be patient while your Kubernetes environment is being built.
      This can take several minutes... \n\nDid you know that k8s is shorthand for
      K-u b e r n e t e-s? \n\nMeaning, k-8 letters-s"
  tabs:
  - title: shell
    type: terminal
    hostname: instruqt-flex-kubernetes
  difficulty: basic
  timelimit: 900
- slug: kube-state-metrics
  id: pyqeu9wokmct
  type: challenge
  title: Kubernetes health with kube-state-metrics
  teaser: Deploy kube-state-metrics
  assignment: "During this step we will install [kube-state-metrics](https://github.com/kubernetes/kube-state-metrics),
    a service that exposes metrics about the various Kubernetes objects. These metrics
    can then be picked up by monitoring agents to provide information on the health
    and performance of your Kubernetes cluster. \n\n# Installing kube-state-metrics\n\nDownload
    kube-state-metrics version 1.7.2 from Github\n```\ncurl -L -o kube-state-metrics-1.7.2.zip
    https://github.com/kubernetes/kube-state-metrics/archive/v1.7.2.zip && unzip kube-state-metrics-1.7.2.zip\n```\n\nInstall
    kube-state-metrics in the cluster\n```\nkubectl apply -f kube-state-metrics-1.7.2/kubernetes\n```\n\nConfirm
    that kube-state-metrics is installed (this might take a minute)\n```\nkubectl
    get pods --all-namespaces | grep kube-state-metrics\n```\n\nAfter a while, you
    should see something like:\n![alt text](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/ksm.png?raw=true
    \"Kube-state-metrics\")\n\n# Looking at the data\n\nLet's take a sneak peak at
    the data that's being retrieved by kube-state-metrics. \nFind out on which IP
    address the kube-state-metrics service is running:\n\n```\nkubectl get svc kube-state-metrics
    -n kube-system\n```\n\nYou can use the CLUSTER-IP address with `curl` to view
    the metrics.\n\n```\ncurl http://<IP_ADDRESS>:8080/metrics\n```\n\nThe metrics
    format is based off the Prometheus standard, which we will cover later in the
    workshop. "
  tabs:
  - title: shell
    type: terminal
    hostname: instruqt-flex-kubernetes
  difficulty: basic
  timelimit: 900
- slug: nr-k8s-integration
  id: zy00zdlvpxid
  type: challenge
  title: New Relic Kubernetes Integration
  teaser: Deploy the New Relic Kubernetes integration
  assignment: "During this step we will deploy the New Relic Kubernetes integration
    to our cluster.\n\nTo achieve this we are going to deploy a DaemonSet into our
    Kubernetes cluster. A DaemonSet is a Kubernetes concept that ensures that we have
    1 pod running on each node in our environment. For more information [check out
    the Kubernetes documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/).\n\nThis
    DaemonSet will ensure that we have the New Relic Kubernetes agent running on each
    node of our cluster.\nThe yaml file required is already available on our machines,
    execute the following command to create the New Relic DaemonSet:\n```\nkubectl
    apply -f nri-k8s.yaml\n```\n\nConfirm the DaemonSet was created: \n```\nkubectl
    get daemonsets\n```\n\nYou should see something like:\n![Daemon set](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/daemonset.png?raw=true
    \"Daemon set\")\n\nConfirm that the agent is running: \n```\nkubectl get pods\n```\n\nAfter
    a minute, you should see something like:\n![New Relic pod running](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/infrapod.png?raw=true
    \"New Relic pod running\")\n\n# Kubernetes Cluster Explorer\nOpen a new tab in
    your browser and go to [one.newrelic.com](https://one.newrelic.com)\n\nClick on
    the *Kubernetes Cluster Explorer* link and navigate to your cluster ('*New Relic
    - Workshop*')\n![Kubernetes Cluster Explorer](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/kce.png?raw=true
    \"Kubernetes Cluster Explorer\")\n\nYour Kubernetes Cluster Explorer should look
    something like this (note: give the agent some time to initialize):\n![Kubernetes
    Cluster Explorer](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/kce2.png?raw=true
    \"Kubernetes Cluster Explorer\")\n\nTake some time to get familiar with the Kubernetes
    cluster explorer. We will be using the cluster explorer in the rest of this session.\n\n**Try
    to find an answer to the following questions**:\n* How many pods do we have running
    in the demo-app namespace?\n* What image is used for the frontend deployment?\n*
    How can I search for the pods that match a specific label?\n\n# Extra: Troubleshooting
    the New Relic agent\nIf the New Relic agent is having trouble, a good place to
    start is by looking at the log messages:\n```\nkubectl logs <POD_NAME>\n```"
  notes:
  - type: text
    contents: |-
      Great job, kube-state-metrics is deployed.

      Time to hook up our cluster with the New Relic Kubernetes agent and start using the Kubernetes Cluster Explorer
  tabs:
  - title: shell
    type: terminal
    hostname: instruqt-flex-kubernetes
  difficulty: basic
  timelimit: 900
- slug: nr-flex-integration
  id: xjoe0lxjckqi
  type: challenge
  title: New Relic Flex Integration
  teaser: Use New Relic's Flex integration
  assignment: "We now have an insight into our applications, logs and the overal health
    of Kubernetes, but what about our supporting services like Redis or RabbitMQ?\n\nNew
    Relic offers integrations to get detailed information about the supporting services
    in a k8s environment so you can gauge their health and performance.\n\nWe do this
    by adding some information to our New Relic infrastructure agent. If you remember
    one of the first things we deployed was the `newrelic-infra` DaemonSet. We're
    now going to adapt the config to monitor our Redis service in more detail.\n\n#
    Redis\n\nYou can find an example configuration on the New Relic docs: [Example
    Redis config](https://github.com/newrelic/nri-redis/blob/master/redis-config.yml.k8s_sample)\n\nYou
    need to uncomment the following in the `nri-k8s.yaml` file. All the way at the
    bottom you will find the following code:\n\n```\n  data:\n    redis-config.yml:
    |\n    ---\n    # Run auto discovery to find pods with label \"app=redis\"\n    #
    https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery\n
    \   discovery:\n      command:\n        # Run NRI Discovery for Kubernetes\n        #
    https://github.com/newrelic/nri-discovery-kubernetes\n        ...\n```\n\nAfter
    you've changed and saved the file you need to reapply the agent config. You can
    do this with the following command: \n```\nkubectl apply -f nri-k8s.yaml\n```\n\n#
    New Relic Dashboards\n\nA dashboard will be automatically created for our Redis
    service.\n\nGo to [New Relic One](one.newrelic.com) in your browser.\n\nClick
    on the *New Relic Infrastructure* button on the New Relic One homepage\n![New
    Relic Infrastructure](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/button-infra.png?raw=true
    \"New Relic Infrastructure\")\n\nClick on *Third-party services* \n![New Relic
    Third-party services](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/button-3rdparty.png?raw=true
    \"New Relic Third-party services\")\n\nAnd open the *Redis dashboard*:\n![Redis
    dashboard](https://github.com/polfliet/instruqt/blob/master/kubernetes-new-relic-university/screenshots/redis.png?raw=true
    \"Redis dashboard\")\n\nThis Dashboard shows the most important KPIs for our Redis
    service.\n"
  notes:
  - type: text
    contents: You've got your cluster reporting into New Relic One. Now let's level
      up with Flex!
  tabs:
  - title: shell
    type: terminal
    hostname: instruqt-flex-kubernetes
  - title: editor
    type: code
    hostname: instruqt-flex-kubernetes
    path: /root/new-relic/
  difficulty: basic
  timelimit: 900
checksum: "2171349382376918257"
