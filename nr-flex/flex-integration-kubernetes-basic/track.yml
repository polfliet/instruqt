slug: flex-integration-kubernetes-basic
id: miovt93nqiny
type: track
title: Flex Integration - Build Your First Kubernetes Configuration
teaser: An introduction to creating configurations for the Flex Integration on New
  Relic's Infrastructure Integration for Kubernetes
description: |-
  # Overview
  This track is an introduction to the [Flex Integration](https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/flex-integration-tool-build-your-own-integration) on New Relic's [Infrastructure Integration for Kubernetes](https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure).

  The primary focus of this track is enabling Flex on Kubernetes. More in-depth tracks are available for both [Kubernetes](https://play.instruqt.com/newrelic/tracks/kubernetes-new-relic-university) and the [Flex Integration](https://play.instruqt.com/newrelic/tracks/flex-integration-linux-basic) if interested.

  ## Requirements
  Completion of this track will require you to have access to your New Relic [License Key](https://docs.newrelic.com/docs/accounts/install-new-relic/account-setup/license-key). This can be from your paid New Relic account or from your free [Developer Edition](https://developer.newrelic.com/build-tools/new-relic-one-applications/developer-edition-program) account.

  ## What is the Flex Integration?
  *From [How to Use New Relic Flex to Create Your Own Codeless Custom Integrations](https://blog.newrelic.com/product-news/how-to-use-new-relic-flex/)*

  "New Relic Flex is an application-agnostic, all-in-one tool that allows you to collect metric data from a wide variety of services. Flex’s approach is different from that of dedicated integrations: Instead of interfacing directly with services, Flex instructs the New Relic Infrastructure agent to listen to standard structured output, which Flex then processes and collects as metric data for Infrastructure.

  With this approach, you can instrument any application that exposes metric data in some way or another, whether it’s from JSON over HTTP or from standard output in a shell session, and combine that data with all your other critical telemetry data in New Relic One. The amount of services you can instrument is only limited by the data sources supported by Flex, which are growing and are open for contribution. If a service can talk, chances are that Flex can listen."

  ## Important Note
  **This track utilizes an ephemeral kubernetes environment. As a result, you should be prepared to finish the entire track in one sitting or risk losing your progress when the timer expires.**
icon: https://github.com/polfliet/instruqt/blob/master/assets/icons/flex-logo.png?raw=true
tags:
- ""
owner: newrelic
developers:
- zmutchler@newrelic.com
- bschmitt@newrelic.com
private: false
published: true
challenges:
- slug: using-kubernetes-secrets
  id: dnqpealpj5d4
  type: challenge
  title: Using Kubernetes Secrets
  teaser: Use a Kubernetes secret to store the New Relic license key
  assignment: "# Overview\nKubernetes secrets are a great way to store passwords,
    private keys, and other sensitive information. The secrets can then be shared
    with pods and containers without having to pass them as plain text in your [YAML](https://yaml.org/)
    files. You can find more information about Kubernetes secrets in the [Kubernetes
    docs](https://kubernetes.io/docs/concepts/configuration/secret/).\n\nIn this challenge,
    you will create a Kubernetes secret that contains your New Relic license key.
    The license key will be used by the New Relic Kubernetes integration to send data
    to the [New Relic One Observability Platform](https://newrelic.com/platform).
    \n\n## Installation\n\nLog in to [New Relic One](https://one.newrelic.com) and
    collect your New Relic license key:\n![License Key](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/license.gif?raw=true
    \"License Key\")\n\n## Create the Kubernetes secret\nCopy and paste the following
    snippet into your workspace's `shell` tab replacing `LICENSE_KEY` at the end with
    your own New Relic license key:\n```\nkubectl create secret generic newrelic-secret
    --from-literal=new_relic_license_key='LICENSE_KEY'\n```\n\nYou can check if the
    secret was added succesfully by running:\n```\nkubectl describe secret newrelic-secret\n```\n\nWhich
    should provide an output like this: \n```\nName:         newrelic-secret\nNamespace:
    \   default\nLabels:       <none>\nAnnotations:  <none>\n\nType:  Opaque\n\nData\n====\nnew_relic_license_key:
    \ 40 bytes\n```\n\nIf you made a mistake, you can delete the secret with:\n```\nkubectl
    delete secret newrelic-secret\n```\n\nThe yaml file used in the New Relic integration
    later will refer to this `newrelic-secret` to retrieve the license key. \n\nIn
    your next challenge, you will install `kube-state-metrics`.\n"
  notes:
  - type: text
    contents: "Please be patient while your Kubernetes environment is being built.
      This can take several minutes... \n\nDid you know that k8s is a numeronym for
      K-u b e r n e t e-s? \n\nMeaning, k-8 letters-s"
  tabs:
  - title: shell
    type: terminal
    hostname: instruqt-flex-kubernetes
  difficulty: basic
  timelimit: 300
- slug: kube-state-metrics
  id: pyqeu9wokmct
  type: challenge
  title: Kube State Metrics
  teaser: Deploy kube-state-metrics
  assignment: "# Overview\nDuring this step you will use your workspace's `shell`
    tab to install [kube-state-metrics](https://github.com/kubernetes/kube-state-metrics),
    a service that exposes metrics about the various Kubernetes objects. These metrics
    can then be picked up by monitoring agents to provide information on the health
    and performance of your Kubernetes cluster. \n\n`kube-state-metrics` is [required](https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements#requirements)
    for the New Relic Kubernetes integration to monitor your clusters properly.\n\n##
    Installing kube-state-metrics\n\nClone the `kube-state-metrics-configs` repository
    from Github:\n```\ngit clone https://github.com/devopscube/kube-state-metrics-configs.git\n```\n\nInstall
    kube-state-metrics in the cluster:\n```\nkubectl apply -f kube-state-metrics-configs/\n```\n\n![kubectl
    apply](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-ksm-apply.png?raw=true
    \"kubectl apply\")\n\nConfirm that kube-state-metrics is installed (this might
    take a minute)\n```\nkubectl get deployments kube-state-metrics -n kube-system\n```\n\n![kubectl
    get deployments](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-ksm-confirm.png?raw=true
    \"kubectl get deployments\")\n\n## Enabling HTTP Proxy\n\nTo setup remote access
    to the various APIs, you'll need to enable an [HTTP Proxy](https://kubernetes.io/docs/tasks/extend-kubernetes/http-proxy-access-api/)
    to run in the background.\n\nRun the following snippet, and then press `ENTER`
    to return to a normal terminal prompt.\n\n```\nkubectl proxy --port=8080 &\n```\n\n![kubectl
    proxy](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-proxy.png?raw=true
    \"kubectl proxy\")\n\nYou can now validate access to `kube-state-metrics` with
    the following `cURL` command, which will enumerate all `etcd_object_counts` metrics,\n\n```\n#
    Validate kube-state-metrics\ncurl -s http://localhost:8080/metrics | grep \"^etcd_object_counts\"\n```\n\n![ksm
    metrics](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-ksm-metrics.png?raw=true
    \"ksm metrics\")\n\nThe kube-state-metrics format is based off the Prometheus
    standard, which is covered in our [Kubernetes track for New Relic University](https://play.instruqt.com/newrelic/tracks/kubernetes-new-relic-university).
    \n\nIn the next challenge you will install the New Relic Kubernetes integration
    using Helm package manager."
  notes:
  - type: text
    contents: |-
      From the `README.md` file in the kube-state-metrics repository:
      ```
      kube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.
      ```
  tabs:
  - title: shell
    type: terminal
    hostname: instruqt-flex-kubernetes
  difficulty: basic
  timelimit: 600
- slug: nr-k8s-integration
  id: zy00zdlvpxid
  type: challenge
  title: New Relic Kubernetes Integration
  teaser: Deploy the New Relic Kubernetes integration using Helm
  assignment: "# Overview\nDuring this step you will use your workspace's `shell`
    and `editor` tabs to deploy the New Relic Kubernetes integration DaemonSet into
    your cluster using [Helm package manager](https://helm.sh/). A [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/)
    is a Kubernetes concept that ensures that you have 1 pod running on each node
    in your environment. Details on the options available for Helm installation of
    the New Relic integration can be found in [the public docs](https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-using-helm).\n\n##
    Installation\nThe yaml file required is already available on your VM, you can
    view it in your `editor` tab by selecting the `nri-k8s-helm.yaml` file. \n\n![helm
    chart](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-helm-chart.png?raw=true
    \"helm chart\")\n\nNote that lines 4-7 hold the settings being applied by this
    Helm chart, including the Kubernetes secret you created in the first challenge,
    the cluster name, and enabling of installation using privileged mode.\n\n*The
    rest of the YAML file holds the Flex integration config and will be discussed
    in the next challenge.*\n\nBack on your `shell` tab, begin by installing New Relic's
    Helm repository\n\n```\nhelm repo add newrelic https://helm-charts.newrelic.com\n```\n\nThen,
    install the Helm chart we have pre-staged. \n\n```\nhelm install -f ./nri-k8s-helm.yaml
    newrelic-infra newrelic/newrelic-infrastructure\n```\n![helm install](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-helm-install.png?raw=true
    \"helm install\")\n\n## Validation\nConfirm the DaemonSet was created: \n```\nkubectl
    get daemonsets\n```\n\n![helm confirm](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-helm-confirm.png?raw=true
    \"helm confirm\")\n\n## Kubernetes Cluster Explorer\nLog in to [New Relic One](https://one.newrelic.com),
    click on the `Apps` icon in the top menu, select the `Kubernetes Cluster Explorer`
    tile and navigate to your cluster name. (`flex-workshop`)\n\n![kce tile](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-kce-tile.gif?raw=true
    \"kce tile\")\n\nYour Kubernetes Cluster Explorer should look something like this
    (note: it will take the integration a few minutes to initialize):\n\n![kce confirm](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-kce-confirm.png?raw=true
    \"kce confirm\")\n\nFor an in-depth workshop on the Cluster Explorer, please see
    the [Kubernetes track for New Relic University](https://play.instruqt.com/newrelic/tracks/kubernetes-new-relic-university).\n\nIn
    the next session, you will be enabling the Flex integration."
  notes:
  - type: text
    contents: |-
      Great job, kube-state-metrics is deployed.

      Time to hook up our cluster with the New Relic Kubernetes integration and start using the Kubernetes Cluster Explorer
  tabs:
  - title: shell
    type: terminal
    hostname: instruqt-flex-kubernetes
  - title: editor
    type: code
    hostname: instruqt-flex-kubernetes
    path: /root/new-relic
  difficulty: basic
  timelimit: 600
- slug: nr-flex-integration
  id: xjoe0lxjckqi
  type: challenge
  title: New Relic Flex Integration
  teaser: Configure New Relic's Flex integration on Kubernetes
  assignment: "# Overview\nIn this challenge you will use your workspace's `shell`
    and `editor` tabs to enable the Flex integration. \nNote that the focus of this
    track is specifically enabling a Flex configuration inside of the New Relic Kubernetes
    integration. For a more detailed introduction to the Flex integration, its APIs,
    and basic troubleshooting, please see the [Flex Integration Build Your First Linux
    Configuration](https://play.instruqt.com/newrelic/tracks/flex-integration-linux-basic)
    track.\n\nWe now have an insight into the overall health of Kubernetes, and if
    you've taken the [Kubernetes track for New Relic University](https://play.instruqt.com/newrelic/tracks/kubernetes-new-relic-university)
    you already know that we have support for over a dozen of the [most popular services](https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/monitor-services-running-kubernetes#requirements)
    run in Kubernetes environments, but what if you need something a little more custom?\n\n[New
    Relic Flex](https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/flex-integration-tool-build-your-own-integration)
    allows you to gather data from any service, with full control over the particular
    details and output.\n\nYou enable this by editing your Helm chart YAML and then
    updating the deployment.\n\n## Enable Flex\nYou can find an example configuration
    of the Helm chart in the [GitHub repository](https://raw.githubusercontent.com/newrelic/helm-charts/master/charts/newrelic-infrastructure/values.yaml).\n\nIn
    your `editor` tab, you need to uncomment (remove the octothorps/pound signs/hashtags/`#`)
    from the `integrations_config` section of the `nri-k8s-helm.yaml` file. All the
    way at the bottom (Lines 20-33) you will find the following code:\n\n```\n#integrations_config:\n#
    \ - name: nri-flex.yaml\n#    data:\n#      integrations:      \n#        - name:
    nri-flex\n#          config:\n#            name: k8sApiLatency\n#            apis:
    \           \n#              - event_type: k8sApiLatency\n#                commands:\n#
    \                 # This is the Nodes endpoint test  \n#                  - run:
    \"curl -s -o /dev/null -w '{\\\"api_endpoint\\\": \\\"nodes\\\",\\\"dns_lookup\\\":
    %{time_namelookup},\\\"tcp_handshake\\\": %{time_connect},\\\"ssl_handshake\\\":
    %{time_appconnect},\\\"pre_transfer\\\": %{time_pretransfer},\\\"redirect\\\":
    %{time_redirect},\\\"start_transfer\\\": %{time_starttransfer},\\\"time_total\\\":
    %{time_total}}' 'http://localhost:8080/api/v1/nodes' || :\"\n#                  #
    This is the Pods endpoint test\n#                  - run: \"curl -s -o /dev/null
    -w '{\\\"api_endpoint\\\": \\\"pods\\\",\\\"dns_lookup\\\": %{time_namelookup},\\\"tcp_handshake\\\":
    %{time_connect},\\\"ssl_handshake\\\": %{time_appconnect},\\\"pre_transfer\\\":
    %{time_pretransfer},\\\"redirect\\\": %{time_redirect},\\\"start_transfer\\\":
    %{time_starttransfer},\\\"time_total\\\": %{time_total}}' 'http://localhost:8080/api/v1/pods'
    || :\"\n```\n\n**PRO TIP: You can use column selection in the `editor` tab by
    holding down `option+shift` before left-click (`alt+shift` on Windows/Linux)**\n\n![flex
    config](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-flex-config.gif?raw=true
    \"flex config\")\n\nThis config has 2 `cURL` commands running against both the
    Nodes and Pods API endpoints for the Kubernetes API Server, reporting back various
    response times available as standard options from the [-w | --write-out](https://curl.haxx.se/docs/manpage.html)
    parameter, all wrapped in JSON formatting so that Flex will automatically parse
    the results. \n\nTo see what the `cURL` request is doing, you can run the following
    against the Nodes API. Note that this command is slightly different from the one
    in the Flex config, just to make it easier to read in terminal:\n```\ncurl -s
    -o /dev/null -w '\\n{\\n    \\\"api_endpoint\\\": \\\"nodes\\\",\\n    \\\"dns_lookup\\\":
    %{time_namelookup},\\n    \\\"tcp_handshake\\\": %{time_connect},\\n    \\\"ssl_handshake\\\":
    %{time_appconnect},\\n    \\\"pre_transfer\\\": %{time_pretransfer},\\n    \\\"redirect\\\":
    %{time_redirect},\\n    \\\"start_transfer\\\": %{time_starttransfer},\\n    \\\"time_total\\\":
    %{time_total}\\n}\\n\\n' 'http://localhost:8080/api/v1/nodes'\n```\n\nAfter you've
    changed and saved the file you need to update your Helm chart. You can do this
    with the following command: \n```\nhelm upgrade -f ./nri-k8s-helm.yaml newrelic-infra
    newrelic/newrelic-infrastructure\n```\n\n![flex update](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-flex-upgrade.png?raw=true
    \"flex update\")\n\n## Validation\n\nIn a few moments you should be able to log
    in to [New Relic One](https://one.newrelic.com) and select the **Query your data**
    link in the upper right to open the [Chart Builder](https://docs.newrelic.com/docs/chart-builder/use-chart-builder/get-started/introduction-chart-builder#chart-builder-advanced).
    \n\n![Chart Builder](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/cb_infra-agent.gif?raw=true
    \"Chart Builder\")\n\nFrom there, you can run the below [NRQL](https://docs.newrelic.com/docs/query-data/nrql-new-relic-query-language/getting-started/introduction-nrql)
    query to validate your Flex config:\n\n```sql\nSELECT\napi_endpoint,\ndns_lookup,\ntcp_handshake,\nssl_handshake,\npre_transfer,\nredirect,\nstart_transfer,\ntime_total\nFROM
    k8sApiLatency\n```\n![flex confirm](https://github.com/polfliet/instruqt/blob/master/nr-flex/screenshots/k8s-flex-confirm.png?raw=true
    \"flex confirm\")\n\n## Conclusion\nIn this track you've learned how to add the
    Flex integration to a Kubernetes cluster instrumented with New Relic's Infrastructure
    integration. Thanks for your time, I hope this class was informative and met your
    needs. I always value feedback, please let me know if you enjoyed this track and
    how it can be improved!"
  notes:
  - type: text
    contents: You've got your cluster reporting into New Relic One. Now let's level
      up with Flex!
  tabs:
  - title: shell
    type: terminal
    hostname: instruqt-flex-kubernetes
  - title: editor
    type: code
    hostname: instruqt-flex-kubernetes
    path: /root/new-relic/
  difficulty: basic
  timelimit: 600
checksum: "7843910135686984146"
show_timer: true
